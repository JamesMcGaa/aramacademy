#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('aramacademy:server');
const https = require('https');
const fs = require('fs');
const http = require('http');
const dotenv = require('dotenv').config();
const DOTENV_DEV_MODES = {
  PROD: 'prod',
  DEV: 'dev',
  ERROR: 'no dev mode provided',
}

let port;
let server;
if(process.env.DEV_MODE == DOTENV_DEV_MODES.DEV){
  port = normalizePort(process.env.PORT || '3000');
  server = http.createServer(app);
}
else if(process.env.DEV_MODE == DOTENV_DEV_MODES.PROD){
  http.createServer(function (req, res) {
      console.log("redirected");
      res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
      res.end();
  }).listen(80);
  port = normalizePort(process.env.PORT || 443);
  server = https.createServer({ key: 
    fs.readFileSync('/etc/letsencrypt/live/aram.academy/privkey.pem'), cert: 
    fs.readFileSync('/etc/letsencrypt/live/aram.academy/fullchain.pem'),
  }, app);
}
else {
  throw DOTENV_DEV_MODES.ERROR; 
}


/**
 * Listen on provided port, on all network interfaces.
 */
app.set('port', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
